1. The height of a tree (binary or not) is defined to be the maximum distance
from the root node to any leaf node. The tree in Figure 5-2, for example, 
has a height of 4 because the path from A to F, G, or H involves four nodes.
Write a function to calculate the height of an arbitrary binary tree.

2. Informally, a preorder traversal involves walking around the tree in
a counter-clockwise manner starting at the root, sticking close to the edges, 
and printing out the nodes as you encounter them. For the tree shown in Figure 5-6, 
the result is 100, 50, 25, 75, 150, 125, 110, and 175. 
Perform a preorder traversal of a binary search tree, printing the value of each node.

3. Perform a preorder traversal of a binary search tree, 
printing the value of each node, but this time you may not use recursion.

4. Given the value of two nodes in a binary search tree, 
find the lowest (nearest) common ancestor. You may assume that both values 
already exist in the tree.For example, using the tree shown in Figure 5-7, 
assume 4 and 14 are the two given nodes. 
The lowest common ancestor would be 8 because itâ€™s an ancestor to both 4 and 14, 
and there is no node lower on the tree that is an ancestor to both 4 and 14.
