https://git-scm.com/book/en/v2 <<Pro Git Book>> very useful
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 (this is a very very good Chinese tutorial)
1. To add a folder to Github, you need first create a folder then create a file in it. 
   Github seems can’t upload a folder directly. It works with files. So you can first create file readMe.txt,
   then git add readMe.txt, then git commit -m “to add a file”. Then git push -u origin master to final commit it. 

2. To show the name or email address, you can use 
   git config user.name
   git config user.email
   git config --global user.name "John Doe"
   git config --global user.email johndoe@example.com
   git config -l // or git config --list to show all the configurations
   To change the default editor to Vim not Emacs, you can
   git config --global core.editor "vim"
   If you want git command has colorful output, you can
   git config --global color.ui true
   To check it
   git config color.ui
   To edit the git config file, it's in each repo .git/config , it's the config for each repo,
   To edit the git config for global, the current user, you can go to ~, the home of the user and change the .gitconfig file

3. To check the status of a file, it’s:
   git status xxx.txt
   You can also check the whole status by 
   git status

4. Here is how to add a new repository to Git, 
   a. "git init newFolder" to mkdir a new direcotory/repository or "git init" when you are in a folder already
   b. make a file, such as readme there under that repo. 
   c. git add the file, git commit the file, same as regular commit.
   d. go to the website to create a new repo, give a name, click the button to create a new repo. 
   (Here is scary, the website makes me thought I will have made a repo by clicking the create button)
   e. After click the create a new repo final certification button, you will be given a link for this repo. 
   f. git remote add origin xxxxxx(the link), then "git remote -v" to validate it. 
   g. Finally, "git push origin master" to commit the repo.
   https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
   h. Sometimes you already commited, but you forget to add a file and you don't want to unstage, you don't want to commit one more time.
         git add the_left_out_file
         git commit --amend --no-edit
     The --no-edit flag allow to make amendment to commit without changing commit message.
   
5. How to update your repository in local machine
   git pull
   Actually 
   git pull = git fetch + git merge (merge to local)
   
6. How to add a big project to github
   First "git add ." to add all the files under this folder
   Second git commit -m "xxx", 
   Third git push -u origin master

7. To overwrite the current changed files because they are garbage, you can
   a. git reset --hard
   b. git pull

8. Checkout
   To start working on a branch because you were working on another branch, and check if it is up-to-date, you can do
   git checkout
   You can also use checkout to goto another branch
   git checkout branchName to go to that branch
   If you want to discard the changes in the file and go back what was in the staging state. For example, you made a change first, 
   commmited, then you made some more changes, but you want to discard them and want to go to last commmited state (snapshot), you can
   git checkout --filename
   git checkout --filename is actually replace whatever in workspace with what in the staging area. So if you make a mistake and delete a file
   but you want to recover it, you can use this command to use the one in the "staging" area to replace the one you have "empty removed one"
   if you want to clone a sub folder
   git checkout HEAD foldername for example:
   git checkout HEAD Servlet/

9. To clone the project, go to a folder to use command
    git clone xxxlink
    If this is a branch called abc, you can 
    git clone -b abc xxxlink

10. Revert
    if revert to last last commit, it can be HEAD^^, if revert to 100 commits ago, it can be HEAD~100
    A git commit is like a snapshot, you put all the organized and well prepared file to a commit,
    once you made some mistake, you can easily revert to the last commit
    To go back to a previous commit, you can 
    git reset --hard adbasdcaewg (this string is the commmit id, so you can go to the commit you want, first few digits is enough)
    You can also do this 
    git reset --hard HEAD^ 
    Git is very fast to change to different version, because it just move the HEAD, it's like a linkedlist
    But after revert to previous version, you want to revert back to latest, but you forget the commit id, you can 
    git reflog  to see all the git command history on your local machine, you can see the commit id there
    To unstage a file, (mistake git add a file), you can
    git reset HEAD filename

11. Git has 3 main stages: modified, staged, commited
    The basic Git workflow goes something like this:
    a. You modify files in your working tree.
    b. You stage the files, adding snapshots of them to your staging area.
    c. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

12. To find manual
    git help <verb>, for example: 
    git help config. 
    man git config is also ok

13. .gitignore file
    You can put a .gitignore file in the repo root level you are working on
    ps, when you use git status to check, you can edit the .gitignore file by adding ".gitignore" to ignore itself, for example
    *.zip
    *.g*
    *.*~
    You can find a lot of official template. super easy to use
    https://github.com/github/gitignore
    But sometimes you want to add a ignored file, you can
    git add -f filename
    If you fail to add a App.class file, you can let git check for you by
    git check-ignore -v App.class

14. To rename a file from a.txt to b.txt, you can do
    git mv a.txt b.txt
    
15. log
    git log to view the history of the repo
    git log -p -2 , where -p means to show the difference introduced in each commit, -2 means the latest 2 changes
    git log -3 --stat
    git log --pretty=oneline , make a lot of code change easier to read
    git log --since=2.weeks
    git log --committer
    git log --graph --pretty=oneline --abbrev-commit , to view the commit tree
    How does git know which branch you are working on? It uses a "HEAD". If you want to see where now the head is pointing to, you can
    git log --oneline --decorate

16. To show all your remote(s) when you are in the repo folder, 
    git remote  ,it shows what is your remote
    git remote -v , this one shows all the details of the remote
    (a repo can have multiple remotes if have many collaborators, once you have cloned the repo, you've already added origin as a remote)
    Add a remote: 
    git remote add remoteNameByYou remoteWebsite 
    for example:
    git remote add origin git@server-name:path/repo-name.git 
    After you connect to a remote, you can push all your local files to remote the first time, by
    git push -u origin master
    where u is to connect the remote master and local master

17. To get the update of the update from remote but doesn't affect your current code. You can do
    git fetch
    You can also specify the remote name and the branch
    git fetch origin master   (origin is host, master is the branch)
    The remote repo is always getting updated, so you need sync the branch info
    git fetch --prune (git fetch -p)
    to remove some local branch not connected to remote and sync the branches/tag in remote

18. After get the update from remote, you can merge it with your current branch, you can do
    git merge origin/master  or
    git rebase origin/master
    A very very good article (especially the pictures) http://www.jianshu.com/p/cca69cb695a6
    But! you should never rebase a shared branch
    If your change doesn't deserver a seperate branch, you should use
    git pull --rebase
    To squash a few commits into one, you can do
    git rebase --interactive <after this commit>
    After that, change the "pick" into "squash" except the first one
   
19. Branch
    To check which you are working on and show all the branches you ever worked on, do
    git branch
    To create a branch called "testing", you do
    git branch testing
    git checkout testing to switch to a branch called testing, the "HEAD" is moved to pointing to testing branch.
    Create a branch and switch to it at the same time, you can do 
    git checkout -b newBranchName
    To delete a branch, you can do
    git branch -d testing
    Check merged / no-merged branch, by
    git branch --merged
    git branch --no-merged
    To create a local branch connected to the remote branch (you first time cloned the repo and have no other branches yet), you can
    git checkout -b your-branch-name origin/original-branch-name
    To set a connection between the two branches, you need
    git branch --set-upstream branch-name origin/branch-name

20. To install git in linux / ubuntu, you can
    sudo apt-get install git
    Then git config --global user.name / user.email to config it

21. You can git add a file many times before commit, if you git add a file, then you make some changes to the file again,
    you need to git add it again. 
    If you want to change the commit message, you can 
    git commit --amend

22. diff 
    difference between the modified file and what is in the staging by 
    git diff filename
    So if you do a git add the file, then you do a git diff again, you won't see anything.
    You can see the difference between newest version and the workspace by
    git diff HEAD filename
    once you have git add the file, you can see the diff, you need use
    git diff --cached filename to see what has been added

23. To generate a ssh key, you can use follow the instructions and use the default settings
    ssh-keygen -t rsa -C "youremailaddress" 

24. Stash
    If you are working on a branch not finished yet but you need to switch to another branch, you can save your working state by
    git stash
    if will save everything for you before you come back. You can check what has been saved by
    git stash list
    if you want to recover the previous state, you can
    git stash pop   to recover the latest one, if there are many stashes you can
    git stash apply stash@{0} (the stash id by checking git stash list)
    If you have worked on a branch already but you have a new branch, you want to keep the changes on the new branch, you can
    git stash   to save the current code to a weird branch
    git fetch   to update the repo
    git checkout newBranchName
    git stash apply  to merge the stashed code with the new branch fresh code
    git stash clear  to clean that weird branch
    git stash list   to check if you have that branch cleaned

25. To fork a repo, you can follow this link
    https://help.github.com/articles/fork-a-repo/ 

26. tag
    To add a tag, which will be easier for you to find something in the future instead of searching through the git commit string, you can
    git add tag-name, for example, git tag v1.0
    Then one tag called v1.0 pointing to HEAD (latest change) is created, you can find all the tags by
    git tag
    To delete a tag, you can 
    git tag -d tag-name
    To add a tag to a previous commit, you can
    git tag tag-name commitString
    To show the details for a tag, you can
    git show tag-name
    You can also give some more description to a tag when you create it, by
    git tag -a v1.0 -m "added some git knowledge" commit-id
    All the tags are created local, if you want to push to remote, you can
    git push origin tag-name
    To revert to the tag commit
    git reset --hard tagname

27. alias
    To configure alias for git, you can 
    git config --global alias.younameit originalcommand , for example
    git config --global alias.st status , so after using this command, next time I can use git st instead of git status

28. master
    origin master is two separate things, and origin/master is one thing. Three things total.
    Two branches:
       master is a local branch
       origin/master is a remote branch (which is a local copy of the branch named "master" on the remote named "origin") 
    One remote:
       origin is a remote
    
    Example: pull in two steps
    Since origin/master is a branch, you can merge it. Here's a pull in two steps:
    Step one, fetch master from the remote origin. The master branch on origin will be fetched and the local copy will be named 
       origin/master. git fetch origin master   
    Step two, you merge origin/master into master. git merge origin/master   
    Step three, you can push your new changes in master back to origin: git push origin master

29. HEAD
    To check the head history or where is your current head, you do
    git reflog  or
    git reflog show HEAD

30. Merge
    If you are working on a feature branch, where develop branch has many updates already which you don't want to miss.
    You can merge the things into feature branch.
    a. git checkout develop  to goto dev branch 
    b. git pull              to update dev branch to get all the new stuff
    c. git checkout featureBranch   to goto feature branch
    d. git merge develop            to merge what you get in develop branch to feature branch
    e. git push                     to push it to remote to finish the merge, otherwise the merge is only on your local

31. How to redo a pushed commit when you made a mistake first time?
    https://stackoverflow.com/questions/22682870/git-undo-pushed-commits  The second answer
    git reset <previous label or sha1>   to change your local back but the file is still kept with your bad change
    then you "do your work" to edit files
    then you git add the file, git commit to make a right comment
    git push -f         to push the correct change to remote
