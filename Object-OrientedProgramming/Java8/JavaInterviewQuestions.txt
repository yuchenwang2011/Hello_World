https://javarevisited.blogspot.com/2015/10/133-java-interview-questions-answers-from-last-5-years.html
also book Java Programming Interviews Exposed


https://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html
http://www.javatpoint.com/corejava-interview-questions
This article will be written in the tone of I will speak to an interviewer. 
1. Why java is platform independent? 
   Suppose you want to talk to people in the world but you speak only 1 language, it's simple, you just need to hire an interpretor.
   And that is JVM, the java virtual machine. It translates the code into the bytecode the hardware platform can understand. Of course,
   you need first install the JRE java runtime environment on that machine. 
2. What's the difference between comparator and comparable interfaces?
   Comparable is that object can be used to compare with another object. Comparator is the object used to compare 2 objects. 
3. What's the difference between interface and an abstract class?
   a. All methods in interface are abstract. But abstract class may have a not abstract method.
   b. A class can implements a few interfaces but can only extends 1 abstract class
   c. When implements a interface, you have to override all the interface's methods. You only need to implement the
      abstract methods in an abstract class, unless your class is also abstract.
   d. Variables in interface are final. (int a = 1, must give val) But abstract class just normal you can be or not be final.
      (subclass inherites the interface's a = 1)
   e. All methods in an interface are (implicitly)public. But abstract class not necessary
   f. Interface can't have static method, but abstract class can.
   g. Interface can't have a constructor, but abstract class has one thought it can't be instantiated.
   h. Interface can't have instance variable, but abstract class can.
4. 3 ways to initialize a thread
   a. A class implements Runnable interface
   b. A class extends Thread class
   c. An application use Executor framework to create a thread pool
5. 7 states of a thread
   a. Runnable
   b. Running
   c. Waiting
   d. Sleeping
   e. Blocked on I/O
   f. Blocked on Synchronization
   g. Dead
6. What is a Iterator?
   Iterator is an interface that has methods for a collection to iterate all elements. Each java collection has a iterator
   method to return a iterator instance. Iterator can remove an element from collection when iterating. 
   
7. What is fail safe? What is fail fast?
   Java collection has 2 kinds of iterators, one is fail fast and one is fail safe. If it is in the concurrent library,
   it is fail safe, then it's safe when iterating, you can modify the collection. 

8. Two types of Exception?
   Checked and unchecked, unchecked ones don't need to be declared by the method to throws.
   
9. If i don't provide an argument to the main method in the console, would the String[] args empty or null? 
   It would be empty. Not null
10. Writing static pulic void is ok as public static void
11. Local variables are not initialized to any default values, instance variables will be defautly set as null.
12. Constructor can't be final and is not inherited. 
13. You can use static block instead of main method
14. Super is the reference for the direct parent class object. 
15. You can't use this() and super() at the same time both in a constructor, because they both need to be first line.
16. With method overloading, you can't just change the return type because the compiler will be confused.
17. You can have many main methods by method overloading. 
18. You cannot overide a static method because it belongs to a class not an object.
19. Can you use final and abstract both with a method?
    No. Because abstract method must need to be overriden. But after using final, method can't be overiden
20. Can you use static and abstract keywords together?
    No. That will be a bad logic. 
21. Can you use static for an interface?
    No. Because interface is abstract, you can't have abstract and static together. 
22. What is a marker interface?
    A marker interface has nothing inside, such as Serializable, Clonable, just used as a marker. 
23. Error and Exception both extends class Throwable.
24. Is it necessary to have a catch block after try?
    You have to unless you have a finally block. 
25. String is immutable. The meaning of immutable is once created, it's value is not changable and not modifiable. It's designed
    this way to prevent this case: Suppose there are 5 references pointing to one string, if one reference changes the string, 
    others will be affected. So String is immutable, StringBuilder is mutable.
26. How many objects will be created in the following code?
    String s1 = "hello"; String s2 = "hello"; String s3 = "hello";
    Only 1. This is more memory efficient.
27. When you use String literal, String s = "hello", only 1 object is created in the String constant pool.
    When you use new, String s = new String("Hello"); 2 objects are created, one in the String constant pool, the other
    in normal heap. The reference s points to the address in the normal heap. So String literal is more
    memory efficient because it just creates 1 and also it checks the string constant pool first, if already exists, 
    it won't create again..
28. Inner class is non-static, inner is part of nested class. You can even have nested interface. And an interface
    can also has a nested class, which is implicitly abstract.
29. Runtime class provides access to the Java runtime system, you can use Runtime.getRuntime().exec() method to invode
    an external process.
30. Reflection: https://www.youtube.com/watch?v=FSGGJ2qtikE
    is a mechanism that during execution, the code can know the information of itself. Given a class name, 
    You can get all the information of this class. And you can also create object, modify the state even it's private, 
    use private methods. 
    
    The video has 4 methods to get the class object's name
    //method 1 to get class type
    Employee employee = new Employee("John", 30);
    Class<?> classType = employee.getClass();
    System.out.println(classType.getName());
    //method 2 to get class type
    Class<?> classType = Employee.class;
    System.out.println(classType.getName());
    
31. What's the difference between Collection and Collections?
    Collection is an interface for list, set and map while Collections is a class to sort list/set/map.
    
32. What's the difference between HashMap and HashTable in Java?

    a. Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, 
       as unsynchronized Objects typically perform better than synchronized ones.
    b. Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.
    c. One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order 
       (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. 
       This wouldn't be as easy if you were using Hashtable.

33. Why and when do you use @Override anotation? 
    Use it every time you override a method for two benefits. 
    1. Do it so that you can take advantage of the compiler checking to make sure you actually are overriding a method 
       when you think you are. This way, if you make a common mistake of misspelling a method name 
       or not correctly matching the parameters, you will be warned that you method does not actually override 
       as you think it does. 
    2. Secondly, it makes your code easier to understand because it is more obvious when methods are overwritten.
